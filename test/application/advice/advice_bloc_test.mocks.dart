// Mocks generated by Mockito 5.0.16 from annotations
// in flutter_advice/test/application/advice/advice_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_advice/domain/advice/entities/advice_entity.dart'
    as _i7;
import 'package:flutter_advice/domain/advice/failures/failures.dart' as _i6;
import 'package:flutter_advice/domain/advice/repositories/advice_repository.dart'
    as _i2;
import 'package:flutter_advice/domain/advice/usecases/advice_usecases.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAdviceRepository_0 extends _i1.Fake implements _i2.AdviceRepository {
}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [AdviceUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdviceUsecases extends _i1.Mock implements _i4.AdviceUsecases {
  MockAdviceUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AdviceRepository get adviceRepository =>
      (super.noSuchMethod(Invocation.getter(#adviceRepository),
          returnValue: _FakeAdviceRepository_0()) as _i2.AdviceRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.AdviceEntity>> getAdviceUsecase() =>
      (super.noSuchMethod(Invocation.method(#getAdviceUsecase, []),
          returnValue: Future<_i3.Either<_i6.Failure, _i7.AdviceEntity>>.value(
              _FakeEither_1<_i6.Failure, _i7.AdviceEntity>())) as _i5
          .Future<_i3.Either<_i6.Failure, _i7.AdviceEntity>>);
  @override
  String toString() => super.toString();
}
